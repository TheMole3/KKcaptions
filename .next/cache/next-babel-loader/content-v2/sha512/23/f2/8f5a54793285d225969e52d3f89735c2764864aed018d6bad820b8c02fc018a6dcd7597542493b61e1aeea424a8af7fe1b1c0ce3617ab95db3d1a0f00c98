{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst globalAny = global;\nimport colors from \"./colors\";\n/* TextRow() A row of text\r\n    props {\r\n        text: String\r\n        state: {\r\n            ...props\r\n            setState\r\n        }\r\n    }\r\n*/\n\nfunction TextRow(props) {\n  var state = props.state;\n  return /*#__PURE__*/_jsx(\"li\", {\n    style: _objectSpread(_objectSpread({}, styles.textRow), props.id == state.state.selRow ? {\n      border: `3px solid rgb(240, 84, 79)`,\n      padding: styles.textRow.padding - 3\n    } : {}),\n    onClick: () => {\n      var textState = props.id == props.state.state.selRow ? {\n        selRow: \"-\",\n        text: \"-\"\n      } : {\n        selRow: props.id,\n        text: props.text\n      }; // If text is selected unselect else select\n\n      state.setState(_objectSpread(_objectSpread({}, state.state), textState)); // Set the text state\n\n      globalAny.socket.emit('setText', textState.text); // Emit text to server\n    },\n    children: /*#__PURE__*/_jsxs(\"span\", {\n      children: [props.text.split(\"\\n\").map((i, key) => {\n        return /*#__PURE__*/_jsx(\"div\", {\n          style: styles.noSelect,\n          children: i\n        }, key);\n      }), \" \"]\n    })\n  });\n}\n/* TitleRow() A row for the title of a song\r\n    props {\r\n        title: String\r\n    }\r\n*/\n\n\nfunction Title(props) {\n  return /*#__PURE__*/_jsx(\"li\", {\n    style: styles.title,\n    children: /*#__PURE__*/_jsx(\"span\", {\n      children: props.title\n    })\n  });\n}\n/* SongList() Create a ul within a div\r\n    props {\r\n        state: {\r\n            ...props\r\n            setState\r\n        }\r\n    }\r\n*/\n\n\nconst SongList = props => {\n  var state = props.state;\n  return /*#__PURE__*/_jsx(\"div\", {\n    children: Object.entries(state.state.songList).filter(x => x).map((song, songKey) => {\n      return [/*#__PURE__*/_jsx(Title, {\n        title: song[0]\n      }, songKey), song[1].map((text, rowKey) => {\n        return /*#__PURE__*/_jsx(TextRow, {\n          text: text,\n          state: state,\n          id: songKey + \":\" + rowKey\n        }, songKey + \":\" + rowKey);\n      })];\n    })\n  });\n};\n\nvar styles = {\n  noSelect: {\n    \"WebkitTouchCallout\": \"none\",\n    \"WebkitUserSelect\": \"none\",\n    \"KhtmlUserSelect\": \"none\",\n    \"MozUserSelect\": \"none\",\n    \"MsUserSelect\": \"none\",\n    \"UserSelect\": \"none\"\n  },\n  textRow: {\n    listStyleType: \"none\",\n    margin: 10,\n    fontSize: \"15pt\",\n    cursor: \"pointer\",\n    padding: 10,\n    backgroundColor: colors.lavenderWeb,\n    borderRadius: 5\n  },\n  title: {\n    listStyleType: \"none\",\n    margin: 10,\n    fontSize: \"10pt\",\n    position: \"relative\",\n    cursor: \"default\",\n    padding: 10,\n    marginTop: 20,\n    backgroundColor: colors.sonicSilver\n  }\n};\nexport default SongList;","map":null,"metadata":{},"sourceType":"module"}