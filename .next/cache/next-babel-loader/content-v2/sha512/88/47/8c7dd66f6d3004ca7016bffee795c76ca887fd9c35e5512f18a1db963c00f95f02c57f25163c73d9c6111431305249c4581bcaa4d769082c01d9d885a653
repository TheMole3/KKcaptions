{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst globalAny = global;\nimport React from 'react';\nimport colors from \"./colors\";\nimport { Switch, Button, FormControlLabel } from '@material-ui/core/';\n\nconst Header = props => {\n  const setLive = event => {\n    var live = event.target.checked ? _objectSpread(_objectSpread({}, props.state.state), {}, {\n      live: event.target.checked\n    }) : _objectSpread(_objectSpread({}, props.state.state), {}, {\n      'selRow': \"-\",\n      \"text\": \"-\",\n      live: event.target.checked\n    });\n    props.state.setState(live);\n    globalAny.socket.emit('setLive', {\n      live: event.target.checked\n    });\n  };\n\n  const changeView = event => {\n    props.state.setState(_objectSpread(_objectSpread({}, props.state.state), {}, {\n      view: props.state.state.view == \"Captions\" ? \"Edit\" : \"Captions\"\n    }));\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    style: styles.header,\n    children: [/*#__PURE__*/_jsx(\"span\", {\n      style: _objectSpread(_objectSpread({}, styles.noSelect), {}, {\n        fontFamily: \"Raleway\"\n      }),\n      children: \"KK captions\"\n    }), /*#__PURE__*/_jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: changeView,\n      style: {\n        width: 100\n      },\n      children: props.state.state.view == \"Captions\" ? \"Edit\" : \"Captions\"\n    }), /*#__PURE__*/_jsx(FormControlLabel, {\n      style: _objectSpread({}, styles.noSelect),\n      control: /*#__PURE__*/_jsx(Switch, {\n        name: \"live\",\n        color: \"primary\",\n        checked: props.state.state.live\n      }),\n      label: \"Live\",\n      labelPlacement: \"start\",\n      onChange: setLive\n    })]\n  });\n};\n\nvar styles = {\n  header: {\n    backgroundColor: colors.tartOrange,\n    display: \"flex\",\n    position: \"sticky\",\n    top: 0,\n    width: \"100%\",\n    borderBottom: \"2px solid \" + colors.lavenderWeb + \"CC\",\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\",\n    zIndex: 10,\n    paddingTop: 7,\n    paddingBottom: 7\n  },\n  KKcaptions: {\n    fontSize: \"10pt\"\n  },\n  noSelect: {\n    \"WebkitTouchCallout\": \"none\",\n    \"WebkitUserSelect\": \"none\",\n    \"KhtmlUserSelect\": \"none\",\n    \"MozUserSelect\": \"none\",\n    \"MsUserSelect\": \"none\",\n    \"UserSelect\": \"none\"\n  }\n};\nexport default Header;","map":null,"metadata":{},"sourceType":"module"}